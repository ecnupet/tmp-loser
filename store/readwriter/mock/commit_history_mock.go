// Code generated by MockGen. DO NOT EDIT.
// Source: store/readwriter/commit_history.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "ecnu.space/tmp-loser/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommitHistoryReadWriter is a mock of CommitHistoryReadWriter interface
type MockCommitHistoryReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCommitHistoryReadWriterMockRecorder
}

// MockCommitHistoryReadWriterMockRecorder is the mock recorder for MockCommitHistoryReadWriter
type MockCommitHistoryReadWriterMockRecorder struct {
	mock *MockCommitHistoryReadWriter
}

// NewMockCommitHistoryReadWriter creates a new mock instance
func NewMockCommitHistoryReadWriter(ctrl *gomock.Controller) *MockCommitHistoryReadWriter {
	mock := &MockCommitHistoryReadWriter{ctrl: ctrl}
	mock.recorder = &MockCommitHistoryReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitHistoryReadWriter) EXPECT() *MockCommitHistoryReadWriterMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockCommitHistoryReadWriter) Insert(ctx context.Context, commit *model.CommitHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, commit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockCommitHistoryReadWriterMockRecorder) Insert(ctx, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCommitHistoryReadWriter)(nil).Insert), ctx, commit)
}

// GetCommitsByUserNameAndQuizID mocks base method
func (m *MockCommitHistoryReadWriter) GetCommitsByUserNameAndQuizID(ctx context.Context, userName string, quizID uint64) ([]*model.CommitHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitsByUserNameAndQuizID", ctx, userName, quizID)
	ret0, _ := ret[0].([]*model.CommitHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitsByUserNameAndQuizID indicates an expected call of GetCommitsByUserNameAndQuizID
func (mr *MockCommitHistoryReadWriterMockRecorder) GetCommitsByUserNameAndQuizID(ctx, userName, quizID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitsByUserNameAndQuizID", reflect.TypeOf((*MockCommitHistoryReadWriter)(nil).GetCommitsByUserNameAndQuizID), ctx, userName, quizID)
}

// GetQuizIDByUserNameAndPageNoAndNum mocks base method
func (m *MockCommitHistoryReadWriter) GetQuizIDByUserNameAndPageNoAndNum(ctx context.Context, userID string, pageNo, num uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuizIDByUserNameAndPageNoAndNum", ctx, userID, pageNo, num)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuizIDByUserNameAndPageNoAndNum indicates an expected call of GetQuizIDByUserNameAndPageNoAndNum
func (mr *MockCommitHistoryReadWriterMockRecorder) GetQuizIDByUserNameAndPageNoAndNum(ctx, userID, pageNo, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuizIDByUserNameAndPageNoAndNum", reflect.TypeOf((*MockCommitHistoryReadWriter)(nil).GetQuizIDByUserNameAndPageNoAndNum), ctx, userID, pageNo, num)
}

// GetCommitsByQuestionID mocks base method
func (m *MockCommitHistoryReadWriter) GetCommitsByQuestionID(ctx context.Context, quizID uint64) ([]*model.CommitHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitsByQuestionID", ctx, quizID)
	ret0, _ := ret[0].([]*model.CommitHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitsByQuestionID indicates an expected call of GetCommitsByQuestionID
func (mr *MockCommitHistoryReadWriterMockRecorder) GetCommitsByQuestionID(ctx, quizID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitsByQuestionID", reflect.TypeOf((*MockCommitHistoryReadWriter)(nil).GetCommitsByQuestionID), ctx, quizID)
}
