// Code generated by MockGen. DO NOT EDIT.
// Source: question.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "ecnu.space/tmp-loser/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQuestionReadWriter is a mock of QuestionReadWriter interface
type MockQuestionReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionReadWriterMockRecorder
}

// MockQuestionReadWriterMockRecorder is the mock recorder for MockQuestionReadWriter
type MockQuestionReadWriterMockRecorder struct {
	mock *MockQuestionReadWriter
}

// NewMockQuestionReadWriter creates a new mock instance
func NewMockQuestionReadWriter(ctrl *gomock.Controller) *MockQuestionReadWriter {
	mock := &MockQuestionReadWriter{ctrl: ctrl}
	mock.recorder = &MockQuestionReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuestionReadWriter) EXPECT() *MockQuestionReadWriterMockRecorder {
	return m.recorder
}

// BatchInsert mocks base method
func (m *MockQuestionReadWriter) BatchInsert(ctx context.Context, quizs []*model.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsert", ctx, quizs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchInsert indicates an expected call of BatchInsert
func (mr *MockQuestionReadWriterMockRecorder) BatchInsert(ctx, quizs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsert", reflect.TypeOf((*MockQuestionReadWriter)(nil).BatchInsert), ctx, quizs)
}

// Insert mocks base method
func (m *MockQuestionReadWriter) Insert(ctx context.Context, question *model.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, question)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockQuestionReadWriterMockRecorder) Insert(ctx, question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockQuestionReadWriter)(nil).Insert), ctx, question)
}

// GetQuestionByType mocks base method
func (m *MockQuestionReadWriter) GetQuestionByType(ctx context.Context, t string) ([]model.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionByType", ctx, t)
	ret0, _ := ret[0].([]model.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionByType indicates an expected call of GetQuestionByType
func (mr *MockQuestionReadWriterMockRecorder) GetQuestionByType(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionByType", reflect.TypeOf((*MockQuestionReadWriter)(nil).GetQuestionByType), ctx, t)
}

// UpdateQuestion mocks base method
func (m *MockQuestionReadWriter) UpdateQuestion(ctx context.Context, question model.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestion", ctx, question)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuestion indicates an expected call of UpdateQuestion
func (mr *MockQuestionReadWriterMockRecorder) UpdateQuestion(ctx, question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockQuestionReadWriter)(nil).UpdateQuestion), ctx, question)
}
